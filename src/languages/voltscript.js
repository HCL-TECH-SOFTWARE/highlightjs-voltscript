/*
Language: VoltScript
Description: Language definition file for VoltScript, a BASIC scripting language evolved from LotusScript
Author: Chester Moses <chester.moses@hcl-software.com>
Contributors: 
Website: https://help.hcl-software.com/docs/voltscript/early-access/index.html
Category: scripting
*/

/** @type LanguageFn */
export default function(hljs) {
  const genKeywords = [
    "DataType",
    "Declare",
    "DefBool",
    "Delete",
    "typeVarName",
    "Erase",
    "Err",
    "Evaluate",
    "Exit",
    "FileCopy",
    "Get",
    "GoS",
    "GoTo",
    "Include",
    "LineInput",
    "ListTag",
    "Lock",
    "LSet",
    "MkDir",
    "Name",
    "OnError",
    "OnEvent",
    "On",
    "Open",
    "OptionBase",
    "OptionCompare",
    "OptionDeclare",
    "OptionPublic",
    "Print",
    "Put",
    "Randomize",
    "Rem",
    "Reset",
    "RmDir",
    "RSet",
    "SelectCase",
    "SendKeys",
    "SetFileAttr",
    "Sleep",
    "Stop",
    "SubDelete",
    "SubInitialize",
    "SubNew",
    "SubTerminate",
    "Use",
    "UseLSX",
    "UseVSE",
    "Width",
    "Write",
  ];

  const tagwords = [
    "If",
    "Select",
    "Try",
    "Enum",
    "Get",
    "Interface",
    "Module",
    "Namespace",
    "Operator",
    "Set",
    "Structure",
    "Using",
    "While",
    "With",
    "Do",
    "Loop",
    "For",
    "ForAll",
    "Next",
    "Continue",
    "AddHandler",
    "RemoveHandler",
    "Event",
    "RaiseEvent",
    "SyncLock"
  ];

  const KEYWORDS = [
    "AddHandler",
    "AddressOf",
    "Alias",
    "And",
    "AndAlso",
    "As",
    "Async",
    "ByRef",
    "ByVal",
    "Call",
    "Case",
    "Catch",
    "CChar",
    "CDate",
    "CDec",
    "Char",
    "CObj",
    "Const",
    "Continue",
    "Decimal",
    "Declare",
    "Default",
    "Delegate",
    "Dim",
    "DirectCast",
    "Each",
    "Else",
    "ElseIf",
    "End",
    "EndIf",
    "Erase",
    "Event",
    "Exit",
    "Finally",
    "Friend",
    "Get",
    "GetType",
    "GetXMLNamespace",
    "Global",
    "GoSub",
    "GoTo",
    "Handles",
    "Implements",
    "Imports",
    "In",
    "Inherits",
    "Interface",
    "IsNot",
    "Let",
    "Lib",
    "Like",
    "Me",
    "Mod",
    "Module",
    "MustInherit",
    "MustOverride",
    "MyBase",
    "MyClass",
    "NameOf",
    "Namespace",
    "Narrowing",
    "New",
    "Next",
    "Not",
    "Nothing",
    "NotInheritable",
    "NotOverridable",
    "Object",
    "Of",
    "On",
    "Option",
    "Optional",
    "Or",
    "OrElse",
    "Out",
    "Overloads",
    "Overridable",
    "Overrides",
    "ParamArray",
    "Partial",
    "Private",
    "Protected",
    "Public",
    "RaiseEvent",
    "ReadOnly",
    "ReDim",
    "RemoveHandler",
    "Resume",
    "Return",
    "SByte",
    "Select",
    "Shadows",
    "Shared",
    "Short",
    "Static",
    "Step",
    "Stop",
    "SyncLock",
    "Then",
    "Throw",
    "To",
    "Try",
    "TryCast",
    "TypeOf",
    "UShort",
    "Wend",
    "When",
    "Widening",
    "WithEvents",
    "WriteOnly",
    "Xor"
  ];

  const builtins = [
    "ACos",
    "ASin",
    "ATn",
    "ATn2",
    "Abs",
    "ArrayAppend",
    "ArrayGetIndex",
    "ArrayReplace",
    "ArrayUnique",
    "Asc",
    "Bin",
    "CBool",
    "CByte",
    "CCur",
    "CDat",
    "CDbl",
    "CInt",
    "CLng",
    "CSng",
    "CStr",
    "CVar",
    "Chr",
    "CodeLock",
    "CodeLockCheck",
    "CodeUnlock",
    "Command",
    "Cos",
    "CreateLock",
    "CreateObject",
    "CreateUUID",
    "CurDir",
    "CurDrive",
    "Date",
    "DateNumber",
    "DateValue",
    "Day",
    "DestroyLock",
    "Dir",
    "EOF",
    "Environ",
    "Erl",
    "Error",
    "Evalute",
    "Execute",
    "Exp",
    "FileAttr",
    "FileDateTime",
    "FileLen",
    "Fix",
    "Format",
    "Fraction",
    "FreeFile",
    "FullTrim",
    "GetFileAttr",
    "GetObject",
    "GetThreadInfo",
    "Hex",
    "Hour",
    "IMESetMode",
    "IMEStatus",
    "Implode",
    "InStr",
    "InStrB",
    "InStrBP",
    "InStrC",
    "Input",
    "InputB",
    "InputBP",
    "InputBox",
    "Int",
    "IsArray",
    "IsDate",
    "IsElement",
    "IsEmpty",
    "IsList",
    "IsNull",
    "IsNumeric",
    "IsObject",
    "IsScalar",
    "IsUnknown",
    "Join",
    "Kill",
    "LBound",
    "LCase",
    "LOC",
    "LOF",
    "LTrim",
    "Left",
    "LeftB",
    "LeftBP",
    "LeftC",
    "Len",
    "LenB",
    "LenBP",
    "LenC",
    "ListTag",
    "Log",
    "MessageBox",
    "Mid",
    "MidB",
    "MidBP",
    "MidC",
    "Minute",
    "Month",
    "MsgBox",
    "Now",
    "Oct",
    "RTrim",
    "Replace",
    "Right",
    "RightB",
    "RightBP",
    "RightC",
    "Rnd",
    "Round",
    "Second",
    "Seek",
    "Sgn",
    "Shell",
    "Sin",
    "Space",
    "Spc",
    "Split",
    "Sqr",
    "Str",
    "StrCompare",
    "StrConv",
    "StrLeft",
    "StrLeftBack",
    "StrRight",
    "StrRightBack",
    "StrToken",
    "Tab",
    "Tan",
    "Time",
    "TimeNumber",
    "TimeValue",
    "Timer",
    "Today",
    "Trim",
    "TypeName",
    "UBound",
    "UCase",
    "UChr",
    "UString",
    "Uni",
    "Val",
    "Weekday",
    "With",
    "statement",
    "Year",
    "Yield",
  ]

  const types = [
    "Boolean",
    "Byte",
    "Integer",
    "Long",
    "Pointer",
    "Single",
    "Double",
    "Currency",
    "String",
    "Variant",
    "Class",
    "Function",
    "Sub",
    "Property",
    "Type",
    "JsonObject",
  ];

  return {
    name: 'VoltScript',
    // not be auto-detected to avoid conflict with VBScript
    disableAutodetect: true,
    aliases: [ 'vss' ],
    case_insensitive: true,
    keywords: {
      keyword: KEYWORDS.concat(tagwords, genKeywords),
      built_in: builtins,
      type: types,
      literal: 'True False Nothing Null Pi',
      operator: 'Imp Eqv Xor Or And Not Mod Like Is IsA = <> < <= > >= =< => >< & - + * / \\ ^ ++ -- += -= *= /= \\=',
    },
    contains: [
      hljs.COMMENT('\'', '\n'),
      hljs.COMMENT(/%REM/, /%END\s+REM/),
      hljs.C_NUMBER_MODE,
      hljs.QUOTE_STRING_MODE,
      {
        scope: 'string',
        begin: /\|/,
        end: /\|/,
        illegal: '\\n',
        contains: [{
          begin: '\\\\[\\s\\S]', relevance: 0
        }],
      },
      {
        scope: 'title.function',
        match: /\b(?<=(Function|Sub) +)(\w+)/,
      },
    ],
  };
}
